<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fluid主题美化-视频背景</title>
    <link href="/posts/3b13a063.html"/>
    <url>/posts/3b13a063.html</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>当大家使用Fluid主题搭建好博客后，看着默认的背景图片是否会觉得单调？</p><p>即使切换图片也感觉效果不佳？看着别人既美观又实用的博客傻傻发呆？</p><p><img src="/Fluid.png"></p><p>本文主要记录个人对Fluid主题的进行改造，从而实现视频背景功能的过程。注意！本文部分核心代码是借助deepseek生成，此方案可能不是最优解，如您有更好的意见欢迎评论区交流。</p><h3 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h3><p>起初在翻阅相关教程时，发现很多内容无法复现。主要原因是Fluid主题版本不同，各版本之间的项目结构会有差异。</p><p>所以第一步是明确自己Fluid版本信息</p><p>打开<code>本地项目\themes\fluid\package.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo-theme-fluid&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.9.8&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;An elegant Material-Design theme for Hexo.&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>可以看到目前我的版本是1.9.8，其他版本无法保证效果</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>我的博客使用GitHub pages构建，并且本人学生党追求尽可能0成本实现所需功能。</p><p>考虑到CDN可能会产生费用问题，以及部分免费CDN对大陆支持较差，</p><p>所以采用了加载本地视频方式来实现视频背景功能，并没有使用CDN，如有需要请自行研究。</p></li><li><p>为防止出现视频背景加载失败的情况，需要添加poster备用方案。</p><p>即先加载静态图片，待视频缓冲完毕后，通过毛玻璃渐变效果过渡到视频背景，若无法加载视频背景，则只显示静态图片。</p></li><li><p>避免直接修改主题文件，必要修改通过<a href="https://hexo.fluid-dev.com/docs/advance/#fluid-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">Fluid-注入代码</a>机制实现，确保更新主题时不会覆盖修改，方便后续维护和扩展。</p></li></ol><h1 id="素材准备"><a href="#素材准备" class="headerlink" title="素材准备"></a>素材准备</h1><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>视频背景的下载可以到致美化，点击顶栏的动态壁纸。</p><p>也可以使用自己喜爱的其他视频。</p><p>选择好视频后需要注意原始视频文件过大，直接使用会造成加载时间过长，我们需要对其压缩</p><p>那么压缩视频的话推荐使用<a href="https://handbrake.fr/">HandBrake</a></p><p><img src="/image-20250419162122567.png"></p><p>例如我目前在用的视频背景，原始大小为10.6MB</p><p><img src="/image-20250415224452541.png"></p><p>使用HandBrake根据自己的需求选择合适的预设进行压缩后，视频体积大幅减小，视频总大小控制在2Mb以内即可</p><p><img src="/image-20250419162655548.png"></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>截取视频第一帧画面，谷歌搜素图片压缩，找一个网站压缩一下，大小最好在200Kb以内。</p><p>我这里使用的是jpg格式，所以修改文件名为<code>video-poster.jpg</code></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>准备好的图片和视频文件，按照如下放置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">├──项目根目录<br>├── <span class="hljs-selector-tag">source</span><br>├─images<br>│      <span class="hljs-selector-tag">video</span>-poster<span class="hljs-selector-class">.jpg</span><br>├─videos<br>│      <span class="hljs-selector-tag">video</span>-<span class="hljs-attribute">background</span><span class="hljs-selector-class">.mp4</span><br></code></pre></td></tr></table></figure><p>若<code>source</code>下无对应文件夹需手动创建，后文遇此情况同理不再赘述</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="config-fluid-yml"><a href="#config-fluid-yml" class="headerlink" title="_config.fluid.yml"></a><code>_config.fluid.yml</code></h3><p>打开<code>_config.fluid.yml</code>配置文件，如没有此文件请查看文档<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE">Fluid-覆盖配置</a></p><p>将默认<code>banner_img</code>按CTRL+&#x2F;注释掉，添加<code>banner_img: transparent</code>，头图高度保持100，同理将不透明度改为0。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br><span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br><span class="hljs-comment"># banner_img: /img/default.png</span><br><span class="hljs-attribute">banner_img</span>: transparent  <span class="hljs-comment"># 强制透明背景图</span><br><br><span class="hljs-comment"># 头图高度，屏幕百分比</span><br><span class="hljs-comment"># Height ratio of banner image</span><br><span class="hljs-comment"># Available: 0 - 100</span><br><span class="hljs-attribute">banner_img_height</span>: 100<br><br><span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0，1 是完全不透明</span><br><span class="hljs-comment"># Opacity of the banner mask, 1.0 is completely opaque</span><br><span class="hljs-comment"># Available: 0 - 1.0</span><br><span class="hljs-comment"># banner_mask_alpha: 0.3</span><br><span class="hljs-attribute">banner_mask_alpha</span>: 0<br></code></pre></td></tr></table></figure><p>由于<code>_config.fluid.yml</code>对于不同页面的背景图片以及不透明度是分开控制的，</p><p>所以依次修改首页、文章页、分类页、标签页、关于页、自定义页、404页、友链页等页面Banner 头图配置至上文状态</p><h3 id="Fluid-注入代码"><a href="#Fluid-注入代码" class="headerlink" title="Fluid-注入代码"></a>Fluid-注入代码</h3><p>打开本地项目，创建<code>项目根目录\scripts\video-injector.js</code></p><p><code>Hexo</code> 在生成静态网站时会自动加载此文件夹下的脚本，而<code>injects.bodyBegin.file</code>代码功能是将<code>source/_inject/video-bg.ejs</code>文件注入到<code>bodyBegin</code>位置。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">hexo.extend.<span class="hljs-built_in">filter</span>.register(<span class="hljs-string">&#x27;theme_inject&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">injects</span>) &#123;<br>  injects.bodyBegin.file(<span class="hljs-string">&#x27;video-background&#x27;</span>, <br>    <span class="hljs-string">&#x27;source/_inject/video-bg.ejs&#x27;</span>, <br>    &#123;&#125;, <br>    &#123; <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span> &#125;, <br>    <span class="hljs-number">-99</span> <span class="hljs-comment">// 确保优先加载</span><br>  );<br>&#125;);<br></code></pre></td></tr></table></figure><p>因此接下来创建<code>项目根目录\source\_inject\video-bg.ejs</code>文件</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-container&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">video</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-background&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">autoplay</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">loop</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">muted</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">playsinline</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;none&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="language-ruby"> url_for(<span class="hljs-string">&#x27;/images/video-poster.jpg&#x27;</span>) </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="language-ruby"> url_for(<span class="hljs-string">&#x27;/videos/video-background.mp4&#x27;</span>) </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="language-ruby"> url_for(<span class="hljs-string">&#x27;/images/video-poster.jpg&#x27;</span>) </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%; height:100%; object-fit: cover&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意！需要将<code>video-bg.ejs</code>文件中的<code>&lt;%= url_for(&#39;/videos/video-background.mp4&#39;) %&gt;</code>以及两个<code>&lt;%= url_for(&#39;/images/video-poster.jpg&#39;) %&gt;</code>修改为自己的路径。</p><p>此处路径的写法为相对路径，因为<code>Hexo</code>会将source目录下的文件复制到public目录中，用户将视频文件放在source&#x2F;videos&#x2F;下，封面图放在source&#x2F;images&#x2F;下，在配置中使用&#x2F;videos&#x2F;…和&#x2F;images&#x2F;…即可。</p><p>如果您已按照上文放置到了正确文件夹，仅需注意路径的文件名即可。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>创建<code>项目根目录\source\css\video-background.css</code>，写入以下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.video-container</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">0</span>;<br><br>  &amp;<span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.4</span>);<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">transition</span>: <br>      opacity <span class="hljs-number">1.2s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">1</span>),<br>      backdrop-filter <span class="hljs-number">1.2s</span> ease; <span class="hljs-comment">/* 分离过渡属性 */</span><br>    <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">20px</span>);<span class="hljs-comment">/* 毛玻璃效果 */</span><br>  &#125;<br><br>  &amp;<span class="hljs-selector-class">.video-loaded</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">video</span> &#123;<br>  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: auto;<br>  <span class="hljs-attribute">height</span>: auto;<br>  <span class="hljs-attribute">object-fit</span>: cover;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>&#125;<br><br><span class="hljs-comment">/* 确保内容显示在视频上方 */</span><br><span class="hljs-selector-tag">main</span>, <span class="hljs-selector-tag">footer</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background</span>: transparent;<br>&#125;<br><br><span class="hljs-comment">/* 覆盖原有header样式 */</span><br><span class="hljs-selector-tag">header</span><span class="hljs-selector-class">.navbar</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed <span class="hljs-meta">!important</span>;  <span class="hljs-comment">/* 固定定位 */</span><br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000</span> <span class="hljs-meta">!important</span>;    <span class="hljs-comment">/* 必须高于视频容器 */</span><br>&#125;<br><br><br><span class="hljs-comment">/* 移动端适配 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-aspect-ratio</span>: <span class="hljs-number">16</span>/<span class="hljs-number">9</span>) &#123;<br>  <span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">video</span> &#123;<br>    <span class="hljs-attribute">width</span>: auto;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-aspect-ratio</span>: <span class="hljs-number">16</span>/<span class="hljs-number">9</span>) &#123;<br>  <span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">video</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: auto;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>创建<code>项目根目录\source\js\video-loader.js</code>，写入以下内容</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> video = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;.video-background&#x27;</span>);<br>  <span class="hljs-keyword">const</span> videoContainer = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;.video-container&#x27;</span>);<br>  <br>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> IntersectionObserver((entries) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (entries[<span class="hljs-number">0</span>].isIntersecting) &#123;<br>      <span class="hljs-comment">// 添加加载完成监听</span><br>      video.addEventListener(<span class="hljs-string">&#x27;loadeddata&#x27;</span>, () =&gt; &#123;<br>        videoContainer.classList.add(<span class="hljs-string">&#x27;video-loaded&#x27;</span>);<br>      &#125;, &#123; once: <span class="hljs-keyword">true</span> &#125;);<br>      <br>      video.load();<br>      video.play().<span class="hljs-keyword">catch</span>(() =&gt; &#123;&#125;); <span class="hljs-comment">// 处理自动播放被阻止的情况</span><br>    &#125;<br>  &#125;);<br>  <br>  observer.observe(video);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="引入CSS、JS"><a href="#引入CSS、JS" class="headerlink" title="引入CSS、JS"></a>引入CSS、JS</h3><p>打开<code>_config.fluid.yml</code>配置文件，如下填写引入自定义的CSS和JS文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><br><span class="hljs-comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><br><span class="hljs-attribute">custom_js</span><span class="hljs-punctuation">: </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/js/video-loader.js</span><br><br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attribute">custom_css</span><span class="hljs-punctuation">: </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/video-background.css</span><br></code></pre></td></tr></table></figure><h1 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h1><p>按照上述操作完成后，source目录结构如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less">├── <span class="hljs-selector-tag">source</span><br>|<br>├─<span class="hljs-selector-tag">css</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-background</span><span class="hljs-selector-class">.css</span><br>├─<span class="hljs-selector-tag">images</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-poster</span><span class="hljs-selector-class">.jpg</span><br>├─<span class="hljs-selector-tag">js</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-loader</span><span class="hljs-selector-class">.js</span><br>├─<span class="hljs-selector-tag">videos</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-background</span><span class="hljs-selector-class">.mp4</span><br>├─<span class="hljs-selector-tag">_inject</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-bg</span><span class="hljs-selector-class">.ejs</span><br>└─<span class="hljs-selector-tag">_posts</span><br>    │ <br></code></pre></td></tr></table></figure><p>使用Git Bash打开本地项目，执行命令本地运行验证效果</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>视频背景</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用命令</title>
    <link href="/posts/6fc55794.html"/>
    <url>/posts/6fc55794.html</url>
    
    <content type="html"><![CDATA[<p>初学markdown和GitHub部署，写一个文档记录常用命令<br>由于在记录常用命令的同时，也在使用这篇文章练习markdown的语法，所以文章内容较杂乱。</p><h2 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h2><p>hexo clean &amp;&amp; hexo deploy –generate</p><p>本地测试</p><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><pre><code class="hljs"> hexo d -g</code></pre><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</td><td align="center">清理缓存 → 生成 → 部署（完整流程）</td></tr><tr><td align="center">hexo d –generate 或 hexo d -g</td><td align="center">自动生成后直接部署（跳过手动生成）</td></tr><tr><td align="center">hexo deploy –force 或 hexo d -f</td><td align="center">强制推送（覆盖远程仓库内容）</td></tr></tbody></table><p>调试部署错误<br>如果遇到问题（如 Spawn failed），添加 –debug 参数查看详细日志：</p><p><code>hexo deploy --debug</code></p><pre><code class="hljs">npm install -g hexo-cli  # 更新插件</code></pre><p>创建文章</p><pre><code class="hljs">hexo new post</code></pre><p>清理 npm 缓存  </p><pre><code class="hljs">npm cache clean --force  </code></pre><p>由于安装了hexo-douban插件，使用hexo d -g命令git bash无法判断具体要执行douban还是deploy，所以需要使用</p><pre><code class="hljs">hexo deploy -g</code></pre><p>清理缓存并更新豆瓣    </p><pre><code class="hljs">hexo clean &amp;&amp; hexo douban</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欢迎访问我的个人博客，小破站正在装修中</title>
    <link href="/posts/9e752869.html"/>
    <url>/posts/9e752869.html</url>
    
    <content type="html"><![CDATA[<p>正在完善后端插件、自动部署、阅读统计、评论回复……</p><p>功能完善后随缘更新</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
