<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo-图片引用问题</title>
    <link href="/posts/dc842c8c/"/>
    <url>/posts/dc842c8c/</url>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>之前文章我们介绍了使用 Typora 编辑博客文章 <a href="https://mifazhan.top/posts/b915b0ef/">Hexo-博客文章编辑(Typora) - MiYingRuShi</a></p><p>即开启 <code>文章资源文件夹</code>，配合 Typora 编辑器的功能，实现方便快捷的文章编辑、图片管理</p><p>讲解了两种配置永久链接的方法 <a href="https://mifazhan.top/posts/33b326d2/">Hexo-永久链接 - MiYingRuShi</a>，本博客采用第二种，即安装 hexo-abbrlink 插件</p><p>然而在配置永久链接之后，博客图片无法正常显示，本篇文章主要记录这个问题以及解决方法</p><img src="/posts/dc842c8c/file-20250519203608193.png" class=""><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>打开 <code>项目根目录\package.json</code> 文件即可看到当前 hexo 版本</p><p>请查看版本信息，以确保此文章内容适用于你的项目</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;hexo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7.3.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>打开 <a href="https://hexo.io/zh-cn/docs/configuration.html">Hexo配置文档</a>可以查看 <code>_config.yml</code> 各配置的功能</p><p>在使用 hexo 框架搭建博客后，其 URL 部分默认配置如下</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-symbol">url:</span> <span class="hljs-symbol">http:</span>//example.com<br><span class="hljs-symbol">permalink:</span> <span class="hljs-symbol">:year/</span><span class="hljs-symbol">:month/</span><span class="hljs-symbol">:day/</span><span class="hljs-symbol">:title/</span><br></code></pre></td></tr></table></figure><h1 id="Hexo-的图片引用方式"><a href="#Hexo-的图片引用方式" class="headerlink" title="Hexo 的图片引用方式"></a>Hexo 的图片引用方式</h1><p> 1、<code>&#123;% asset_img "image.jpg" "" %&#125;</code></p><p>Markdown 语法</p><p>早期版本的 hexo 无法直接通过 Markdown 语法引用图片</p><p>随着 hexo 的更新，已经支持将 <code>![](image.jpg)</code> 自动转换为 <code>&lt;img src=&quot;/posts/dc842c8c/image.jpg&quot; &gt;</code></p><p>2、<code>&lt;img&gt;</code> 标签</p><p>HTML 的 <code>&lt;img&gt;</code> 标签，没什么好介绍的</p><p>3、<code>asset_img</code> 标签</p><p>这是 Hexo 的专属标签插件，​<strong>​自动适配 Hexo 资源文件夹的路径规则​</strong>​。当开启 <code>post_asset_folder</code> 配置后，Hexo 会根据文章路径动态生成图片的最终 URL</p><p>但使用 <code>asset_img</code> 标签只能在已部署或者本地运行测试的博客页面中显示，在 Markdown 编辑器内是无法预览图片的</p><p>再加上随着 hexo 的更新，已经支持将 <code>![](image.jpg)</code> 自动转换为 <code>&lt;img src=&quot;/posts/dc842c8c/image.jpg&quot; &gt;</code></p><p>所以 <code>asset_img</code> 标签这种引用方法很少在编辑文章时直接使用</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>在开始分析之前需要先明确当前的设置</p><ul><li>启用 post_asset_folder</li><li>使用相对路径的本地图片引用</li></ul><p>最早出现图片无法显示问题是在安装 hexo-abbrlink 插件之后，于是想当然的以为是插件的问题</p><p>将 hexo-abbrlink 插件卸载后，保持 URL 默认设置，图片引用问题也确实解决了</p><p>但这个问题确实与 abbrlink 插件无关，而是与修改博客_config. Yml 配置文件中的 URL 选项有关。</p><h2 id="测试-Permalink-配置"><a href="#测试-Permalink-配置" class="headerlink" title="测试 Permalink 配置"></a>测试 Permalink 配置</h2><p>即使不安装 abbrlink 插件，仅按照 hexo 官方文档<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接（Permalinks） | Hexo</a> 调整 Permalink，也有可能出现图片无法显示的问题</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-symbol">url:</span> <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/mifazhan.top/</span><br><span class="hljs-symbol">permalink:</span> posts/<span class="hljs-symbol">:title/</span><br></code></pre></td></tr></table></figure><p>例如将配置修改为上述形式后，文章图片也无法正确加载</p><p>无论是理应会自动转换的 <code>&#123;% asset_img "image.jpg" "" %&#125;</code>，还是 img 标签都无法正常显示</p><p>而这时使用 asset_img 语法引用的图片则没有任何问题，依然可以正常显示。</p><p>这时倘若将配置改为 <code>permalink: :title/</code>，文章图片所有的引用都不会出问题</p><p>那如果一直使用 <code>permalink: :title/</code> 是不是万事大吉了呢？</p><p>并不是， <code>: title/</code> 关键字获取的是 Markdown 文件的名称，当我们习惯性的把 markdown 文件用中文命名时，URL 中就会出现中文，也可能会造成图片无法正常显示</p><p>且重命名文件又会改变文章 URL</p><h2 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h2><p>路径未适配资源文件夹结构<br>Hexo 默认会将资源文件输出到 public&#x2F;&lt;文章路径&gt;&#x2F; 下，但直接写时，Markdown 解析器可能按相对文章的位置查找资源，而非适配 Hexo 生成的最终路径。<br>当使用 hexo-abbrlink 或自定义 permalink 格式后，文章的 URL 层级结构发生变化，导致以下两种引用方式失效：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">![](image.<span class="hljs-keyword">jpg) </span>              <span class="hljs-comment"># 相对路径失效</span><br>&lt;img src=<span class="hljs-string">&quot;image.jpg&quot;</span>&gt;        <span class="hljs-comment"># 绝对路径错误</span><br></code></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>既然我们需要修改 URL 配置，而修改后 <code>&#123;% asset_img "image.jpg" "" %&#125;</code> 和 <code>&lt;img&gt;</code> 标签引用方法会失效</p><p>那么索性寻找方法，直接将 <code>![]()</code> 引用方法全部转换为 ​​asset_img 语法</p><p>Hexo-image-link 插件完美解决了这个问题</p><p><a href="https://github.com/cocowool/hexo-image-link">GitHub - cocowool&#x2F;hexo-image-link: 当MD中引用本地文件时，处理生成的html中的图片链接。</a></p><h2 id="Hexo-image-link"><a href="#Hexo-image-link" class="headerlink" title="Hexo-image-link"></a>Hexo-image-link</h2><p><code>&#123;% asset_img "local-image.png" "image file label" %&#125;</code> -&gt; <code>&#123;% asset_img label local-image.png %&#125;</code></p><p>在Hexo启用<code>post_asset_folder: true</code>选项后，将Markdown语法的图片路径转换为asset_img的方式，使图片能够在使用typora编辑和hexo预览发布时都能正常显示。</p><p>以上啰啰嗦嗦的一大堆看不懂也没有关系，简而言之就是装这个插件就行</p><p>装好之后我个人测试无论如何修改 URL 配置，没有再出现图片无法显示的问题</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>在项目根目录右键打开命令行工具或 Git Bash</p><p>执行命令安装插件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-<span class="hljs-selector-tag">image</span>-link <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><img src="/posts/dc842c8c/file-20250520231242728.png" class=""><p>安装完成后正常编辑博客，使用 Markdown 语法插入图像即可</p><p>可以看到之后再执行 <code>$ hexo generate</code> 命令时，插件会自动将 <code>&#123;% asset_img "image.jpg" "" %&#125;</code> 语法转换为 <code>asset_img</code> 标签</p><img src="/posts/dc842c8c/file-20250520231548972.png" class=""><p>经测试问题解决</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>abbrlink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-永久链接</title>
    <link href="/posts/33b326d2/"/>
    <url>/posts/33b326d2/</url>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>打开 <code>项目根目录\package.json</code> 文件即可看到当前 hexo 版本</p><p>请查看版本信息，以确保此文章内容适用于你的项目</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;hexo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7.3.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>打开 <a href="https://hexo.io/zh-cn/docs/configuration.html">Hexo配置文档</a>可以查看 <code>_config.yml</code> 各配置的功能</p><p>在使用 hexo 框架搭建博客后，其 URL 部分默认配置如下</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-symbol">url:</span> <span class="hljs-symbol">http:</span>//example.com<br><span class="hljs-symbol">permalink:</span> <span class="hljs-symbol">:year/</span><span class="hljs-symbol">:month/</span><span class="hljs-symbol">:day/</span><span class="hljs-symbol">:title/</span><br></code></pre></td></tr></table></figure><p><code>url: http://example.com</code> 部分正常修改为自己网址即可</p><p>而 permalink 默认配置过于冗长，且一旦更改文件名，文章的 URL 就会改变，不利于搜索引擎收录和外部引用</p><p>因此多数人会调整配置或安装插件来实现永久链接</p><h1 id="永久链接"><a href="#永久链接" class="headerlink" title="永久链接"></a>永久链接</h1><h2 id="Hexo-文档"><a href="#Hexo-文档" class="headerlink" title="Hexo 文档"></a>Hexo 文档</h2><p>按照 hexo 官方文档<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接（Permalinks） | Hexo</a> 调整 Permalink</p><img src="/posts/33b326d2/file-20250519195112124.png" class=""><p>文档中记录了所有变量，以及对应的功能</p><p>用户可以根据自己的喜好调整</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">permalink:</span> <span class="hljs-symbol">:layout/</span><span class="hljs-symbol">:year</span><span class="hljs-symbol">:month</span><span class="hljs-symbol">:day</span><span class="hljs-symbol">:hour</span><span class="hljs-symbol">:minute</span><span class="hljs-symbol">:second</span>.html<br></code></pre></td></tr></table></figure><p>例如上述配置将 URL 设置为了纯数字形式的文章创建时间</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>通过安装插件，如 <a href="https://github.com/ohroy/hexo-abbrlink">GitHub - ohroy&#x2F;hexo-abbrlink: create one and only link for every post for hexo</a> 来实现永久链接</p><p>类似的插件有很多，根据自己的需求选择即可</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在项目根目录右键打开命令行工具或 Git Bash</p><p>执行命令安装</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-abbrlink <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>修改 config. Yml 文件中的 permalink 为</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">permalink:</span> posts/<span class="hljs-symbol">:abbrlink/</span> <br><span class="hljs-comment"># 或</span><br><span class="hljs-symbol">permalink:</span> posts/<span class="hljs-symbol">:abbrlink</span>.html<br></code></pre></td></tr></table></figure><p>在 <code>_config.yml </code> 添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># abbrlink config</span><br><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>      <span class="hljs-comment"># Algorithm used to calc abbrlink. Support crc16(default) and crc32</span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>        <span class="hljs-comment"># Representation of abbrlink in URLs. Support dec(default) and hex</span><br>  <span class="hljs-attr">drafts:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment"># Whether to generate abbrlink for drafts. (false in default)</span><br>  <span class="hljs-attr">force:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># Enable force mode. In this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had an abbrlink. (false in default)</span><br>  <span class="hljs-attr">writeback:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Whether to write changes to front-matters back to the actual markdown files. (true in default)</span><br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>生成的链接将如下所示：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">crc16 <span class="hljs-meta">&amp; hex</span><br>https<span class="hljs-punctuation">:</span><span class="hljs-comment">//post.zz173.com/posts/66c8.html</span><br><br>crc16 <span class="hljs-meta">&amp; dec</span><br>https<span class="hljs-punctuation">:</span><span class="hljs-comment">//post.zz173.com/posts/65535.html</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">crc32 <span class="hljs-meta">&amp; hex</span><br>https<span class="hljs-punctuation">:</span><span class="hljs-comment">//post.zz173.com/posts/8ddf18fb.html</span><br><br>crc32 <span class="hljs-meta">&amp; dec</span><br>https<span class="hljs-punctuation">:</span><span class="hljs-comment">//post.zz173.com/posts/1690090958.html</span><br></code></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>修改 URL 可能会造成图片无法正常显示的问题，详细信息请浏览<a href="https://mifazhan.top/posts/dc842c8c/">Hexo-图片引用问题 - MiYingRuShi</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>abbrlink</tag>
      
      <tag>URL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-使用Typora编辑博客文章</title>
    <link href="/posts/52b6ead4/"/>
    <url>/posts/52b6ead4/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>目前 Typora 是收费的，详情请参考 <a href="https://typoraio.cn/">Typora 官方中文站</a></p><p>不过网上很容易找到免费或者修改后的版本，我目前使用的是果核 <a href="https://www.ghxi.com/typora.html">Typora 1.10.8( 修改版) - Markdown编辑器 - 果核剥壳</a></p><h2 id="Typora问题"><a href="#Typora问题" class="headerlink" title="Typora问题"></a>Typora问题</h2><p>在我的使用过程中遇到了一个问题，更换多个渠道的 Typora 的安装包依然存在，目前我也不清楚问题原因</p><p>当我在即时渲染模式下使用 Typora 编辑博客时</p><p>输入正文第一行内容时会卡一下输入法，无法输入中文只成功输入了第一个字母，然后光标也自己跳转到了 Yaml 代码部分。</p><p>但倘若编辑不带有 Yaml 代码的 markdown 文件则没有任何问题</p><p><img src="app://ed317644ec0902ff41eb952f9013f84cae1f/C:/My%20Code/blog/source/_posts/%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/file-20250429220253827.png?1745987866415"></p><p>解决方法便是点击左下角切换到源代码模式，输入第一行中文，之后无论哪种模式，再输入中文就没有问题了。</p><p>但如果还想在上图 <code>你好</code> 之前的位置添加内容，还是会重复出现此问题，如果有更好的解决方法欢迎评论区交流</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>当我们想要在文章中添加图片，应该怎么做呢？</p><p>主要分为两种图床和本地图片引用方式</p><p>考虑到图床需要考虑国内外网络的兼容问题、费用问题等等</p><p>因此我更推荐使用本地图片引用，配合 hexo 资源文件夹以及Typora 编辑器插入图片时复制到指定路径功能，实现快捷方便的图片管理</p><h3 id="hexo-资源文件夹"><a href="#hexo-资源文件夹" class="headerlink" title="hexo 资源文件夹"></a>hexo 资源文件夹</h3><p>首先为大家介绍下和梳理 hexo 引用图片的各种方式，部分内容来自 <a href="https://hexo.io/zh-cn/docs/asset-folders">hexo 资源文件夹</a></p><h4 id="全局资源文件夹"><a href="#全局资源文件夹" class="headerlink" title="全局资源文件夹"></a>全局资源文件夹</h4><p><img src="app://ed317644ec0902ff41eb952f9013f84cae1f/C:/My%20Code/blog/source/_posts/%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/file-20250515234537885.png?1747323937890"></p><h4 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h4><p><img src="app://ed317644ec0902ff41eb952f9013f84cae1f/C:/My%20Code/blog/source/_posts/%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/file-20250515234759701.png?1747324079705"></p><h4 id="相对路径引用的标签插件"><a href="#相对路径引用的标签插件" class="headerlink" title="相对路径引用的标签插件"></a>相对路径引用的标签插件</h4><p><img src="app://ed317644ec0902ff41eb952f9013f84cae1f/C:/My%20Code/blog/source/_posts/%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/file-20250519222928683.png?1747664968688"></p><p>这是 Hexo 的专属标签插件，​<strong>​自动适配 Hexo 资源文件夹的路径规则​</strong>​。当开启 <code>post_asset_folder</code> 配置后，Hexo 会根据文章路径动态生成图片的最终 URL</p><p>但使用 <code>asset_img</code> 标签只能在已部署或者本地运行测试的博客页面中显示，在 Markdown编辑器内是无法预览图片的</p><p>再加上随着 hexo 的更新，已经支持将 <code>![](image.jpg)</code> 自动转换为 <code>&lt;img src=&quot;/posts/52b6ead4/image.jpg&quot; &gt;</code>，也就是下面 <code>使用 Markdown 嵌入图片</code> 部分的内容</p><p>所以 <code>asset_img</code> 标签这种引用方法很少在编辑文章时直接使用</p><h4 id="使用-Markdown-嵌入图片"><a href="#使用-Markdown-嵌入图片" class="headerlink" title="使用 Markdown 嵌入图片"></a>使用 Markdown 嵌入图片</h4><p><img src="app://ed317644ec0902ff41eb952f9013f84cae1f/C:/My%20Code/blog/source/_posts/%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/file-20250515234617283.png?1747323977286"></p><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 是 Hexo 默认安装的 Markdown 渲染器插件，无效手动安装，检查 <code>post_asset_folder: true</code> 是否正确配置即可</p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>首先按照 <code>文章资源文件夹</code> 所述，将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>接着打开 Typora - 偏好设置 - 图像</p><p><img src="app://ed317644ec0902ff41eb952f9013f84cae1f/C:/My%20Code/blog/source/_posts/%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/file-20250501223228288.png?1746109948293" alt="Typora设置"></p><p>按上图所示将插入图片时… 调整为 复制到指定路径，并在下方输入 <code>./$&#123;filename&#125;</code>，</p><p>将图片语法偏好调整为优先使用相对路径，保存设置</p><p>之后无论是本地的图片还是网络中的图片，复制后直接在 Typora 中粘贴</p><p>Typora 会自动将图片保存到 markdown 文件同名文件夹中，并使用 <code>![](image.jpg)</code> 语法引用</p><p>从而实现优雅地编辑博客文章</p><p><img src="app://ed317644ec0902ff41eb952f9013f84cae1f/C:/My%20Code/blog/source/_posts/%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/file-20250501223928226.png?1746110368231"></p><h2 id="图片引用存在的问题"><a href="#图片引用存在的问题" class="headerlink" title="图片引用存在的问题"></a>图片引用存在的问题</h2><p>如果你修改了 <code>_config.yml</code> 中的 URL 配置，比如添加了 abbrlink 插件</p><p>或者将其设置为了其他的自己喜欢的形式</p><p>又或者 URL 中出现了中文</p><p>图片引用就会出现问题，导致图片无法正常显示</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-params">url:</span> https:<span class="hljs-operator">//</span>mifazhan.top<span class="hljs-symbol">/</span><br><span class="hljs-params">permalink:</span> posts<span class="hljs-operator">/</span>:abbrlink<span class="hljs-symbol">/</span> <br></code></pre></td></tr></table></figure><p>一开始我也以为是 abbrlink 插件的问题，在 abbrlink 看到了这个议题</p><p><a href="https://github.com/ohroy/hexo-abbrlink/issues/68"># 有关当下版本启用post_asset_folder后与abbrlink插件冲突解决方案</a></p><p>后续测试发现，与是否安装 abbrlink 无关，保持 URL 默认配置不会有问题</p><p>将其修改为了其他样式，比如 <code>permalink: posts/:title/</code>，文章图片同样无法正确加载</p><p>解决方案在上述议题中已有简略描述，碍于篇幅后续会专门再写一篇文章。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-博客文章编辑</title>
    <link href="/posts/b915b0ef/"/>
    <url>/posts/b915b0ef/</url>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>使用 Hexo 框架搭建了个人博客后，需要选择合适的工具来编辑博客文章。</p><p>Hexo 主要使用 <a href="http://daringfireball.net/projects/markdown/">Markdown </a> 语言解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>目前针对 Hexo 博客文章编辑的解决方案繁多，以下为个人测试之后认为有较好用值得推荐的</p><h1 id="1-Hexo-插件类"><a href="#1-Hexo-插件类" class="headerlink" title="1. Hexo 插件类"></a>1. Hexo 插件类</h1><ul><li><p><a href="https://github.com/DeepSpaceHarbor/hexo-bridge">hexo-bridge</a></p></li><li><p><a href="https://github.com/jaredly/hexo-admin">hexo-admin</a></p></li><li><p><a href="https://github.com/lwz7512/hexo-admin-ehc">hexo-admin-ehc</a></p></li></ul><p>上述插件都是为博客添加网站管理面板，登录到后端对网站进行管理和文章编辑</p><p>注意！上述插件需要开放端口用于登录后端，因此只推荐将博客项目部署在自己服务器用户使用</p><p>如果你和我一样使用 GitHub pages 部署或其他静态托管服务</p><p>即使安装插件后也只能在本地预览环境下使用，无法达到最佳效果</p><h1 id="2-在线编辑器类"><a href="#2-在线编辑器类" class="headerlink" title="2. 在线编辑器类"></a>2. 在线编辑器类</h1><ul><li><a href="https://www.imalun.com/web_hexo_editor">hexo 在线编辑器 - 白云苍狗</a></li></ul><p>这个在线编辑器是我个人认为目前最好用的，功能完善、界面美观，支持图片复制粘贴、支持代码提示以及快捷设置文本样式，为作者大大点 str⭐。</p><p>还有一些手搓在线 markdown 编辑器并嵌入到博客项目中的，大家感兴趣自行研究，我个人认为有些太麻烦。</p><h1 id="3-Markdown-编辑器"><a href="#3-Markdown-编辑器" class="headerlink" title="3. Markdown 编辑器"></a>3. Markdown 编辑器</h1><ul><li><a href="https://obsidian.md/sync">obsidian</a></li></ul><p>功能最为强大，且拥有海量插件，在 Windows、Linux、Mac、Android、iOS 都可下载使用，</p><p>完全覆盖了主流操作系统，购买会员可以使用软件的多端同步功能。</p><p>即使是非会员也可通过 git 插件，借助 GitHub 仓库来实现同步功能</p><img src="/posts/b915b0ef/image-20250429112615834.png" class="" title="image-20250429112615834"><p>Obsidian 虽功能强大但操作复杂不适合新手，后续会专门再写篇文章介绍 obsidian。</p><ul><li><a href="https://typoraio.cn/">Typora</a></li></ul><p>所见即所得，轻便且强大，无论是使用还是设置都非常适合新手入门</p><p>再配合Typora 插入图片功能，即可实现无论是本地的图片还是网络中的图片，复制后直接在 Typora 中粘贴</p><p>Typora 会自动将图片保存到 markdown 文件同名文件夹中，并使用 <code>![](image.jpg)</code> 语法引用</p><p>详细教程在这里<a href="https://mifazhan.top/posts/52b6ead4/">Hexo-使用Typora编辑博客文章 - MiYingRuShi</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JetBrains全家桶激活教程</title>
    <link href="/posts/54eeecd6/"/>
    <url>/posts/54eeecd6/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JetBrains旗下的诸多软件（如IDEA、PyCharm、WebStorm）都非常好用，目前提供免费但功能受限社区版本，专业版高昂的费用让人望而却步。</p><p>有没有什么方法可以免费使用专业版呢？这便是本文要介绍的内容<a href="https://github.com/ipfs/public-gateway-checker">public-gateway-checker</a></p><h2 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h2><ol><li>本站不提供任何破解软件安装包，仅介绍在互联网被广泛流传和使用的方法思路，信息来自网络，版权争议与本站无关。</li><li>使用该方法获取的专业版，仅限用于学习和研究目的，请勿用于商业或者非法用途</li><li>如果您喜欢该程序，请支持正版软件，购买注册，得到更好的正版服务。</li><li>如果你是学生或教师，且能够使用教育邮箱，可以考虑<a href="https://www.jetbrains.com/zh-cn/community/education/#students">JetBrains免费教育许可证</a></li></ol><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>1.下载</p><p>前往官网下载自己想要使用的专业版软件即可</p><img src="/posts/54eeecd6/image-20250421000535438.png" class="" title="IDEA"><p>2.打开网站<a href="https://3.jetbra.in/">jetbra</a></p><p>网站会自动测试可以连通的站点</p><img src="/posts/54eeecd6/image-20250420233336066.png" class="" title="jetbra"><p>2.查看测试结果，选择online站点打开。</p><p>如果没有可用的站点，个人网络环境问题，可以尝试切换手机热点或其他网络</p><img src="/posts/54eeecd6/image-20250420233909708.png" class=""><p>点击蓝色超链接下载文件，解压后打开目录如下</p><img src="/posts/54eeecd6/image-20250420234231411.png" class="" title="jetbra文件"><p>此文件夹不可删除，建议放至C盘根目录或其他位置其他位置妥善保管</p><p>3.打开<code>scripts</code>文件夹</p><p>具体文件及对应的功能如下所示，按照自己的需要选择对应的vbs文件 右键-在命令提示符中打开 按照提示耐心等待即可</p><img src="/posts/54eeecd6/image-20250420234547767.png" class="" title="scripts文件夹"><p>4.回到网页端复制对应的激活码</p><img src="/posts/54eeecd6/image-20250420235043384.png" class="" title="激活码"><p>例如我要激活IDEA，点击复制，打开IDEA专业版软件，按照下图选择，填写激活码点击激活即可</p><p>这里我已经激活过了仅作演示，第一次使用idea可能是英文界面大同小异，大家自己探索一下即可</p><img src="/posts/54eeecd6/image-20250420235316206.png" class="" title="激活"><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>如果激活不成功或者图方便，可以使用这个<a href="https://www.ghxi.com/idea.html">IntelliJ IDEA 2023.3.6 便携增强版 - 果核剥壳</a></p><p>因为学校机房idea不能用，这里再放一个学习通云盘链接，应该是不限速的</p><p><a href="https://pan-yz.cldisk.com/v2/external/resourceDetail.html?appid=2539F541-76D2-4949-9F18-52C967AE8F47&nonce=-559600941&timestamp=1745417233186&showAppBar=true&autoPreview=true&objectId=a9d2ee24e61f9b39b5e04e59b152f441&signature=6bbf5921618d8a37b660636d5af3cf8c">IntelliJ IDEA 2023.3.6 便携增强版 - 果核剥壳</a></p>]]></content>
    
    
    <categories>
      
      <category>编程软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JetBrains</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题-添加视频背景</title>
    <link href="/posts/46339511/"/>
    <url>/posts/46339511/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>当大家使用Fluid主题搭建好博客后，看着默认的背景图片是否会觉得单调？</p><p>即使切换图片也感觉效果不佳？看着别人既美观又实用的博客傻傻发呆？</p><img src="/posts/46339511/Fluid.png" class="" title="Fluid"><p>本文主要记录个人对Fluid主题的进行改造，从而实现视频背景功能的过程。注意！本文部分核心代码是借助deepseek生成，此方案可能不是最优解，如您有更好的意见欢迎评论区交流。</p><h3 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h3><p>起初在翻阅相关教程时，发现很多内容无法复现。主要原因是Fluid主题版本不同，各版本之间的项目结构会有差异。</p><p>所以第一步是明确自己Fluid版本信息</p><p>打开<code>本地项目\themes\fluid\package.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo-theme-fluid&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.9.8&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;An elegant Material-Design theme for Hexo.&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>可以看到目前我的版本是1.9.8，其他版本无法保证效果</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>我的博客使用GitHub pages构建，并且本人学生党追求尽可能0成本实现所需功能。</p><p>考虑到CDN可能会产生费用问题，以及部分免费CDN对大陆支持较差，</p><p>所以采用了加载本地视频方式来实现视频背景功能，并没有使用CDN，如有需要请自行研究。</p></li><li><p>为防止出现视频背景加载失败的情况，需要添加poster备用方案。</p><p>即先加载静态图片，待视频缓冲完毕后，通过毛玻璃渐变效果过渡到视频背景，若无法加载视频背景，则只显示静态图片。</p></li><li><p>避免直接修改主题文件，必要修改通过<a href="https://hexo.fluid-dev.com/docs/advance/#fluid-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">Fluid-注入代码</a>机制实现，确保更新主题时不会覆盖修改，方便后续维护和扩展。</p></li></ol><h1 id="素材准备"><a href="#素材准备" class="headerlink" title="素材准备"></a>素材准备</h1><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>视频背景的下载可以到<a href="https://zhutix.com/">致美化</a>，点击顶栏的动态壁纸。</p><p>也可以使用自己喜爱的其他视频。</p><p>选择好视频后需要注意原始视频文件过大，直接使用会造成加载时间过长，我们需要对其压缩</p><p>那么压缩视频的话推荐使用<a href="https://handbrake.fr/">HandBrake</a></p><img src="/posts/46339511/image-20250419162122567.png" class="" title="HandBrake"><p>例如我目前在用的视频背景，原始大小为10.6MB</p><img src="/posts/46339511/image-20250415224452541.png" class="" title="视频大小"><p>使用<code>HandBrake</code>根据自己的需求选择合适的预设进行压缩后，视频体积大幅减小，视频总大小控制在2Mb以内即可</p><img src="/posts/46339511/image-20250419162655548.png" class="" title="HandBrake预设"><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>截取视频第一帧画面，谷歌搜索图片压缩，找一个网站压缩一下，大小最好在200Kb以内。</p><p>技术好、追求严谨细节的也可以使用ffmpeg。</p><p>我这里使用的是jpg格式，所以修改文件名为<code>video-poster.jpg</code></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>准备好的图片和视频文件，按照如下放置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">├──项目根目录<br>├── <span class="hljs-selector-tag">source</span><br>├─images<br>│      <span class="hljs-selector-tag">video</span>-poster<span class="hljs-selector-class">.jpg</span><br>├─videos<br>│      <span class="hljs-selector-tag">video</span>-<span class="hljs-attribute">background</span><span class="hljs-selector-class">.mp4</span><br></code></pre></td></tr></table></figure><p>若<code>source</code>下无对应文件夹需手动创建，后文遇此情况同理不再赘述</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="config-fluid-yml"><a href="#config-fluid-yml" class="headerlink" title="_config.fluid.yml"></a><code>_config.fluid.yml</code></h3><p>打开<code>_config.fluid.yml</code>配置文件，如没有此文件请查看文档<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE">Fluid-覆盖配置</a></p><p>将默认<code>banner_img</code>按CTRL+&#x2F;注释掉，添加<code>banner_img: transparent</code>，头图高度保持100，同理将不透明度改为0。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br><span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br><span class="hljs-comment"># banner_img: /img/default.png</span><br><span class="hljs-attribute">banner_img</span>: transparent  <span class="hljs-comment"># 强制透明背景图</span><br><br><span class="hljs-comment"># 头图高度，屏幕百分比</span><br><span class="hljs-comment"># Height ratio of banner image</span><br><span class="hljs-comment"># Available: 0 - 100</span><br><span class="hljs-attribute">banner_img_height</span>: 100<br><br><span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0，1 是完全不透明</span><br><span class="hljs-comment"># Opacity of the banner mask, 1.0 is completely opaque</span><br><span class="hljs-comment"># Available: 0 - 1.0</span><br><span class="hljs-comment"># banner_mask_alpha: 0.3</span><br><span class="hljs-attribute">banner_mask_alpha</span>: 0<br></code></pre></td></tr></table></figure><p>由于<code>_config.fluid.yml</code>对于不同页面的背景图片以及不透明度是分开控制的，</p><p>所以依次修改首页、文章页、分类页、标签页、关于页、自定义页、404页、友链页等页面Banner 头图配置至上文状态</p><h3 id="Fluid-注入代码"><a href="#Fluid-注入代码" class="headerlink" title="Fluid-注入代码"></a>Fluid-注入代码</h3><p>打开本地项目，创建<code>项目根目录\scripts\video-injector.js</code></p><p><code>Hexo</code> 在生成静态网站时会自动加载此文件夹下的脚本，而<code>injects.bodyBegin.file</code>代码功能是将<code>source/_inject/video-bg.ejs</code>文件注入到<code>bodyBegin</code>位置。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">hexo.extend.<span class="hljs-built_in">filter</span>.register(<span class="hljs-string">&#x27;theme_inject&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">injects</span>) &#123;<br>  injects.bodyBegin.file(<span class="hljs-string">&#x27;video-background&#x27;</span>, <br>    <span class="hljs-string">&#x27;source/_inject/video-bg.ejs&#x27;</span>, <br>    &#123;&#125;, <br>    &#123; <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span> &#125;, <br>    <span class="hljs-number">-99</span> <span class="hljs-comment">// 确保优先加载</span><br>  );<br>&#125;);<br></code></pre></td></tr></table></figure><p>因此接下来创建<code>项目根目录\source\_inject\video-bg.ejs</code>文件</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-container&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">video</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-background&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">autoplay</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">loop</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">muted</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">playsinline</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;none&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="language-ruby"> url_for(<span class="hljs-string">&#x27;/images/video-poster.jpg&#x27;</span>) </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="language-ruby"> url_for(<span class="hljs-string">&#x27;/videos/video-background.mp4&#x27;</span>) </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="language-ruby"> url_for(<span class="hljs-string">&#x27;/images/video-poster.jpg&#x27;</span>) </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%; height:100%; object-fit: cover&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意！需要将<code>video-bg.ejs</code>文件中的<code>&lt;%= url_for(&#39;/videos/video-background.mp4&#39;) %&gt;</code>以及两个<code>&lt;%= url_for(&#39;/images/video-poster.jpg&#39;) %&gt;</code>修改为自己的路径。</p><p>此处路径的写法为相对路径，因为<code>Hexo</code>会将source目录下的文件复制到public目录中，用户将视频文件放在source&#x2F;videos&#x2F;下，封面图放在source&#x2F;images&#x2F;下，在配置中使用&#x2F;videos&#x2F;…和&#x2F;images&#x2F;…即可。</p><p>如果您已按照上文放置到了正确文件夹，仅需注意路径的文件名即可。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>创建<code>项目根目录\source\css\video-background.css</code>，写入以下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.video-container</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">0</span>;<br><br>  &amp;<span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.4</span>);<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">transition</span>: <br>      opacity <span class="hljs-number">1.2s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">1</span>),<br>      backdrop-filter <span class="hljs-number">1.2s</span> ease; <span class="hljs-comment">/* 分离过渡属性 */</span><br>    <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">20px</span>);<span class="hljs-comment">/* 毛玻璃效果 */</span><br>  &#125;<br><br>  &amp;<span class="hljs-selector-class">.video-loaded</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">video</span> &#123;<br>  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: auto;<br>  <span class="hljs-attribute">height</span>: auto;<br>  <span class="hljs-attribute">object-fit</span>: cover;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>&#125;<br><br><span class="hljs-comment">/* 确保内容显示在视频上方 */</span><br><span class="hljs-selector-tag">main</span>, <span class="hljs-selector-tag">footer</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background</span>: transparent;<br>&#125;<br><br><span class="hljs-comment">/* 覆盖原有header样式 */</span><br><span class="hljs-selector-tag">header</span><span class="hljs-selector-class">.navbar</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed <span class="hljs-meta">!important</span>;  <span class="hljs-comment">/* 固定定位 */</span><br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000</span> <span class="hljs-meta">!important</span>;    <span class="hljs-comment">/* 必须高于视频容器 */</span><br>&#125;<br><br><br><span class="hljs-comment">/* 移动端适配 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-aspect-ratio</span>: <span class="hljs-number">16</span>/<span class="hljs-number">9</span>) &#123;<br>  <span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">video</span> &#123;<br>    <span class="hljs-attribute">width</span>: auto;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-aspect-ratio</span>: <span class="hljs-number">16</span>/<span class="hljs-number">9</span>) &#123;<br>  <span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">video</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: auto;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>创建<code>项目根目录\source\js\video-loader.js</code>，写入以下内容</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> video = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;.video-background&#x27;</span>);<br>  <span class="hljs-keyword">const</span> videoContainer = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;.video-container&#x27;</span>);<br>  <br>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> IntersectionObserver((entries) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (entries[<span class="hljs-number">0</span>].isIntersecting) &#123;<br>      <span class="hljs-comment">// 添加加载完成监听</span><br>      video.addEventListener(<span class="hljs-string">&#x27;loadeddata&#x27;</span>, () =&gt; &#123;<br>        videoContainer.classList.add(<span class="hljs-string">&#x27;video-loaded&#x27;</span>);<br>      &#125;, &#123; once: <span class="hljs-keyword">true</span> &#125;);<br>      <br>      video.load();<br>      video.play().<span class="hljs-keyword">catch</span>(() =&gt; &#123;&#125;); <span class="hljs-comment">// 处理自动播放被阻止的情况</span><br>    &#125;<br>  &#125;);<br>  <br>  observer.observe(video);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="引入CSS、JS"><a href="#引入CSS、JS" class="headerlink" title="引入CSS、JS"></a>引入CSS、JS</h3><p>打开<code>_config.fluid.yml</code>配置文件，如下填写引入自定义的CSS和JS文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><br><span class="hljs-comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><br><span class="hljs-attribute">custom_js</span><span class="hljs-punctuation">: </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/js/video-loader.js</span><br><br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attribute">custom_css</span><span class="hljs-punctuation">: </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/video-background.css</span><br></code></pre></td></tr></table></figure><h1 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h1><p>按照上述操作完成后，source目录结构如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less">├── <span class="hljs-selector-tag">source</span><br>|<br>├─<span class="hljs-selector-tag">css</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-background</span><span class="hljs-selector-class">.css</span><br>├─<span class="hljs-selector-tag">images</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-poster</span><span class="hljs-selector-class">.jpg</span><br>├─<span class="hljs-selector-tag">js</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-loader</span><span class="hljs-selector-class">.js</span><br>├─<span class="hljs-selector-tag">videos</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-background</span><span class="hljs-selector-class">.mp4</span><br>├─<span class="hljs-selector-tag">_inject</span><br>│      <span class="hljs-selector-tag">video</span><span class="hljs-selector-tag">-bg</span><span class="hljs-selector-class">.ejs</span><br>└─<span class="hljs-selector-tag">_posts</span><br>    │ <br></code></pre></td></tr></table></figure><p>使用Git Bash打开本地项目，执行命令本地运行验证效果</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo常用命令&amp;markdown语法</title>
    <link href="/posts/6fc55794/"/>
    <url>/posts/6fc55794/</url>
    
    <content type="html"><![CDATA[<p>初见<code>Hexo</code>框架并且安装了一些插件,对于命令不太熟悉，以此文档记录汇总常用命令以及markdown语法</p><p>部分内容出自<a href="https://hexo.io/zh-cn/docs/commands">Hexo文档</a>，为方便将常用组合命令和插件命令放在了前面，并且删除了<code>$ </code>，方便使用复制粘贴后直接运行</p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="常用组合命令"><a href="#常用组合命令" class="headerlink" title="常用组合命令"></a>常用组合命令</h2><p>1.清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)，重新生成静态文件 (<code>public</code>)，启动本地服务器</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean &amp;&amp; hexo <span class="hljs-keyword">generate</span> &amp;&amp; hexo server<br></code></pre></td></tr></table></figure><p>2.重新生成静态文件 (<code>public</code>)，再立即部署到服务器</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo deploy --<span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>3.清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)，重新生成静态文件 (<code>public</code>)，再立即部署到服务器（推荐使用）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean &amp;&amp; hexo <span class="hljs-keyword">generate</span> &amp;&amp; hexo deploy <br></code></pre></td></tr></table></figure><p>区别如下</p><table><thead><tr><th align="center">命令</th><th align="center">说明</th><th align="center">适用场景</th></tr></thead><tbody><tr><td align="center"><code>hexo d -g</code></td><td align="center">基于当前已有的缓存生成后 → 部署</td><td align="center">未修改主题、插件或配置文件的情况下快速更新文章内容</td></tr><tr><td align="center"><code>hexo c &amp;&amp; hexo g &amp;&amp; hexo d</code></td><td align="center">清理缓存 → 生成 → 部署（完整流程）</td><td align="center">修改了主题、插件、配置文件或发现网站显示异常时</td></tr></tbody></table><p>如部署时遇到错误，添加 –debug 参数查看详细日志：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hexo <span class="hljs-keyword">deploy</span> <span class="hljs-params">--debug</span><br></code></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>1.查看已安装的插件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> ls -dept <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>2.<a href="https://github.com/mythsman/hexo-douban">hexo-douban</a></p><p>展示帮助文档</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo douban -h</span><br></code></pre></td></tr></table></figure><p>生成豆瓣页面</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo douban</span><br></code></pre></td></tr></table></figure><p>3.<a href="https://github.com/chen-qingyu/hexo-console-zhihu">hexo-console-zhihu</a></p><p>在文章同级目录下生成一个 my_post.zhihu.md 文件，方便直接导入知乎文章编辑器，如果不指定文章名，默认处理所有文章。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo zhihu <span class="hljs-tag">&lt;<span class="hljs-name">可选指定的文章名</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示版本信息。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。 如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。 使用布局 <code>draft</code> 来创建草稿。 如果标题包含空格的话，请使用引号括起来。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">文章的路径。 自定义文章的路径。</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在的话，替换当前的文章。</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章别名。 自定义文章的 URL。</td></tr></tbody></table><p>默认情况下，<code>Hexo</code> 会使用文章的标题来决定文章文件的路径。 对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。 你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">hexo <span class="hljs-built_in">new</span> page --path about/<span class="hljs-keyword">me</span> <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！ title 是必须指定的！ 例如，这不会产生您可能期望的行为：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 <code>Hexo</code> 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。 这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="center">在生成完成后部署。</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="center">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="center">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="center">强制重新生成</td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="center">要同时生成的文件的最大数量。 默认无限制</td></tr></tbody></table><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。 默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启用日志。 Override logger format.</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure><p>部署你的网站。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">在部署前生成</td></tr></tbody></table><h2 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h2><ul><li><code>键盘上下键</code>，输入临近的历史命令</li><li><code>TAB键</code>，自动补全命令（按一次自动补全，连续按两次，提示所有以输入开头字母的所有命令）</li><li><code>ctrl + Insert</code>复制</li><li><code>Shift + Insert</code>粘贴</li><li><code>clear</code>，清除屏幕里面的所有命令</li><li><code>pwd</code>，显示当前目录路径（常用）</li></ul><p>我使用的是Fluid主题，记录一些<code>npm</code>的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">update</span> <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>清理 <code>npm </code>缓存  </p><pre><code class="hljs">npm cache clean --force  </code></pre><p>先写这些，随用随写</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欢迎访问我的个人博客，小破站正在装修中</title>
    <link href="/posts/9e752869/"/>
    <url>/posts/9e752869/</url>
    
    <content type="html"><![CDATA[<p>正在完善后端插件、自动部署、阅读统计、评论回复……</p><p>功能完善后随缘更新</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
